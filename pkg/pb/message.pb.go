// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type MessageType int32

const (
	MessageType_MT_UNKNOWN MessageType = 0
	MessageType_MT_TEXT    MessageType = 1
	MessageType_MT_FACE    MessageType = 2
	MessageType_MT_IMAGE   MessageType = 3
)

var MessageType_name = map[int32]string{
	0: "MT_UNKNOWN",
	1: "MT_TEXT",
	2: "MT_FACE",
	3: "MT_IMAGE",
}

var MessageType_value = map[string]int32{
	"MT_UNKNOWN": 0,
	"MT_TEXT":    1,
	"MT_FACE":    2,
	"MT_IMAGE":   3,
}

func (x MessageType) String() string {
	return proto.EnumName(MessageType_name, int32(x))
}

func (MessageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}

// 消息封装
type MessageWrapper struct {
	Topic                string       `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	SeqId                int64        `protobuf:"varint,2,opt,name=seq_id,json=seqId,proto3" json:"seq_id,omitempty"`
	Client               string       `protobuf:"bytes,3,opt,name=client,proto3" json:"client,omitempty"`
	Username             string       `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Timestamp            string       `protobuf:"bytes,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Nickname             string       `protobuf:"bytes,6,opt,name=nickname,proto3" json:"nickname,omitempty"`
	Level                int64        `protobuf:"varint,7,opt,name=level,proto3" json:"level,omitempty"`
	Avatar               string       `protobuf:"bytes,8,opt,name=avatar,proto3" json:"avatar,omitempty"`
	Color                string       `protobuf:"bytes,9,opt,name=color,proto3" json:"color,omitempty"`
	MsgBody              *MessageBody `protobuf:"bytes,10,opt,name=msg_body,json=msgBody,proto3" json:"msg_body,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *MessageWrapper) Reset()         { *m = MessageWrapper{} }
func (m *MessageWrapper) String() string { return proto.CompactTextString(m) }
func (*MessageWrapper) ProtoMessage()    {}
func (*MessageWrapper) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{0}
}
func (m *MessageWrapper) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageWrapper) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageWrapper.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageWrapper) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageWrapper.Merge(m, src)
}
func (m *MessageWrapper) XXX_Size() int {
	return m.Size()
}
func (m *MessageWrapper) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageWrapper.DiscardUnknown(m)
}

var xxx_messageInfo_MessageWrapper proto.InternalMessageInfo

func (m *MessageWrapper) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

func (m *MessageWrapper) GetSeqId() int64 {
	if m != nil {
		return m.SeqId
	}
	return 0
}

func (m *MessageWrapper) GetClient() string {
	if m != nil {
		return m.Client
	}
	return ""
}

func (m *MessageWrapper) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *MessageWrapper) GetTimestamp() string {
	if m != nil {
		return m.Timestamp
	}
	return ""
}

func (m *MessageWrapper) GetNickname() string {
	if m != nil {
		return m.Nickname
	}
	return ""
}

func (m *MessageWrapper) GetLevel() int64 {
	if m != nil {
		return m.Level
	}
	return 0
}

func (m *MessageWrapper) GetAvatar() string {
	if m != nil {
		return m.Avatar
	}
	return ""
}

func (m *MessageWrapper) GetColor() string {
	if m != nil {
		return m.Color
	}
	return ""
}

func (m *MessageWrapper) GetMsgBody() *MessageBody {
	if m != nil {
		return m.MsgBody
	}
	return nil
}

// 消息体
type MessageBody struct {
	MessageType          MessageType `protobuf:"varint,1,opt,name=message_type,json=messageType,proto3,enum=pb.MessageType" json:"message_type,omitempty"`
	MessageContent       string      `protobuf:"bytes,2,opt,name=message_content,json=messageContent,proto3" json:"message_content,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *MessageBody) Reset()         { *m = MessageBody{} }
func (m *MessageBody) String() string { return proto.CompactTextString(m) }
func (*MessageBody) ProtoMessage()    {}
func (*MessageBody) Descriptor() ([]byte, []int) {
	return fileDescriptor_33c57e4bae7b9afd, []int{1}
}
func (m *MessageBody) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MessageBody) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MessageBody.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MessageBody) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MessageBody.Merge(m, src)
}
func (m *MessageBody) XXX_Size() int {
	return m.Size()
}
func (m *MessageBody) XXX_DiscardUnknown() {
	xxx_messageInfo_MessageBody.DiscardUnknown(m)
}

var xxx_messageInfo_MessageBody proto.InternalMessageInfo

func (m *MessageBody) GetMessageType() MessageType {
	if m != nil {
		return m.MessageType
	}
	return MessageType_MT_UNKNOWN
}

func (m *MessageBody) GetMessageContent() string {
	if m != nil {
		return m.MessageContent
	}
	return ""
}

func init() {
	proto.RegisterEnum("pb.MessageType", MessageType_name, MessageType_value)
	proto.RegisterType((*MessageWrapper)(nil), "pb.MessageWrapper")
	proto.RegisterType((*MessageBody)(nil), "pb.MessageBody")
}

func init() { proto.RegisterFile("message.proto", fileDescriptor_33c57e4bae7b9afd) }

var fileDescriptor_33c57e4bae7b9afd = []byte{
	// 369 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x91, 0xcd, 0x8a, 0xdb, 0x30,
	0x14, 0x85, 0x47, 0xce, 0xc4, 0x71, 0xae, 0xa7, 0x1e, 0x23, 0xda, 0x41, 0x94, 0x62, 0xc2, 0x6c,
	0x1a, 0x66, 0xe1, 0xc5, 0x74, 0xd9, 0x55, 0x12, 0xdc, 0x12, 0x8a, 0x53, 0x30, 0x2e, 0x29, 0xdd,
	0x18, 0xff, 0x88, 0xe0, 0xd6, 0xb6, 0x14, 0x4b, 0x0d, 0xf8, 0x4d, 0x0a, 0x7d, 0xa1, 0x2e, 0xfb,
	0x08, 0x25, 0x7d, 0x91, 0x62, 0xc9, 0x49, 0x3a, 0x3b, 0x7d, 0xe7, 0xde, 0x83, 0x8e, 0x8e, 0xe0,
	0x59, 0x4d, 0x85, 0x48, 0x77, 0xd4, 0xe7, 0x2d, 0x93, 0x0c, 0x1b, 0x3c, 0xbb, 0xff, 0x69, 0x80,
	0x13, 0x6a, 0x75, 0xdb, 0xa6, 0x9c, 0xd3, 0x16, 0x3f, 0x87, 0xb1, 0x64, 0xbc, 0xcc, 0x09, 0x9a,
	0xa1, 0xf9, 0x34, 0xd2, 0x80, 0x5f, 0x80, 0x29, 0xe8, 0x3e, 0x29, 0x0b, 0x62, 0xcc, 0xd0, 0x7c,
	0x14, 0x8d, 0x05, 0xdd, 0xaf, 0x0b, 0x7c, 0x07, 0x66, 0x5e, 0x95, 0xb4, 0x91, 0x64, 0xa4, 0xb6,
	0x07, 0xc2, 0x2f, 0xc1, 0xfa, 0x2e, 0x68, 0xdb, 0xa4, 0x35, 0x25, 0xd7, 0x6a, 0x72, 0x66, 0xfc,
	0x0a, 0xa6, 0xb2, 0xac, 0xa9, 0x90, 0x69, 0xcd, 0xc9, 0x58, 0x0d, 0x2f, 0x42, 0xef, 0x6c, 0xca,
	0xfc, 0x9b, 0x72, 0x9a, 0xda, 0x79, 0xe2, 0x3e, 0x5a, 0x45, 0x0f, 0xb4, 0x22, 0x13, 0x9d, 0x41,
	0x41, 0x9f, 0x21, 0x3d, 0xa4, 0x32, 0x6d, 0x89, 0xa5, 0x33, 0x68, 0xea, 0xb7, 0x73, 0x56, 0xb1,
	0x96, 0x4c, 0xf5, 0x43, 0x14, 0xe0, 0x07, 0xb0, 0x6a, 0xb1, 0x4b, 0x32, 0x56, 0x74, 0x04, 0x66,
	0x68, 0x6e, 0x3f, 0xde, 0xfa, 0x3c, 0xf3, 0x87, 0x12, 0x96, 0xac, 0xe8, 0xa2, 0x49, 0x2d, 0x76,
	0xfd, 0xe1, 0xfe, 0x2b, 0xd8, 0xff, 0xe9, 0xf8, 0x11, 0x6e, 0x86, 0x06, 0x13, 0xd9, 0x71, 0xaa,
	0x0a, 0x72, 0x9e, 0xd8, 0xe3, 0x8e, 0xd3, 0xc8, 0xae, 0x2f, 0x80, 0x5f, 0xc3, 0xed, 0xc9, 0x93,
	0xb3, 0x46, 0xf6, 0x4d, 0x19, 0x2a, 0x8e, 0x33, 0xc8, 0x2b, 0xad, 0x3e, 0x04, 0xe7, 0xbb, 0x94,
	0xcf, 0x01, 0x08, 0xe3, 0xe4, 0xd3, 0xe6, 0xc3, 0xe6, 0xe3, 0x76, 0xe3, 0x5e, 0x61, 0x1b, 0x26,
	0x61, 0x9c, 0xc4, 0xc1, 0xe7, 0xd8, 0x45, 0x03, 0xbc, 0x5b, 0xac, 0x02, 0xd7, 0xc0, 0x37, 0x60,
	0x85, 0x71, 0xb2, 0x0e, 0x17, 0xef, 0x03, 0x77, 0xb4, 0xbc, 0xfb, 0x75, 0xf4, 0xd0, 0xef, 0xa3,
	0x87, 0xfe, 0x1c, 0x3d, 0xf4, 0xe3, 0xaf, 0x77, 0xf5, 0xe5, 0xda, 0x7f, 0xcb, 0xb3, 0xcc, 0x54,
	0x7f, 0xfe, 0xe6, 0x5f, 0x00, 0x00, 0x00, 0xff, 0xff, 0x52, 0x53, 0x60, 0xd6, 0x04, 0x02, 0x00,
	0x00,
}

func (m *MessageWrapper) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.MsgBody != nil {
		{
			size, err := m.MsgBody.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintMessage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x52
	}
	if len(m.Color) > 0 {
		i -= len(m.Color)
		copy(dAtA[i:], m.Color)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Color)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Avatar) > 0 {
		i -= len(m.Avatar)
		copy(dAtA[i:], m.Avatar)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Avatar)))
		i--
		dAtA[i] = 0x42
	}
	if m.Level != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.Level))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Nickname) > 0 {
		i -= len(m.Nickname)
		copy(dAtA[i:], m.Nickname)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Nickname)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Timestamp) > 0 {
		i -= len(m.Timestamp)
		copy(dAtA[i:], m.Timestamp)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Timestamp)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Client) > 0 {
		i -= len(m.Client)
		copy(dAtA[i:], m.Client)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Client)))
		i--
		dAtA[i] = 0x1a
	}
	if m.SeqId != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.SeqId))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageBody) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageBody) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MessageBody) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.MessageContent) > 0 {
		i -= len(m.MessageContent)
		copy(dAtA[i:], m.MessageContent)
		i = encodeVarintMessage(dAtA, i, uint64(len(m.MessageContent)))
		i--
		dAtA[i] = 0x12
	}
	if m.MessageType != 0 {
		i = encodeVarintMessage(dAtA, i, uint64(m.MessageType))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintMessage(dAtA []byte, offset int, v uint64) int {
	offset -= sovMessage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MessageWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.SeqId != 0 {
		n += 1 + sovMessage(uint64(m.SeqId))
	}
	l = len(m.Client)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Timestamp)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Nickname)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.Level != 0 {
		n += 1 + sovMessage(uint64(m.Level))
	}
	l = len(m.Avatar)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	l = len(m.Color)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.MsgBody != nil {
		l = m.MsgBody.Size()
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *MessageBody) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageType != 0 {
		n += 1 + sovMessage(uint64(m.MessageType))
	}
	l = len(m.MessageContent)
	if l > 0 {
		n += 1 + l + sovMessage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovMessage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozMessage(x uint64) (n int) {
	return sovMessage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MessageWrapper) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageWrapper: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageWrapper: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SeqId", wireType)
			}
			m.SeqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SeqId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Client = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timestamp = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nickname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nickname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Level", wireType)
			}
			m.Level = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Level |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Avatar", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Avatar = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Color", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Color = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MsgBody", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.MsgBody == nil {
				m.MsgBody = &MessageBody{}
			}
			if err := m.MsgBody.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageBody) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageBody: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageBody: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageType", wireType)
			}
			m.MessageType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MessageType |= MessageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageContent", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthMessage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthMessage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MessageContent = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipMessage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthMessage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipMessage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowMessage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowMessage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthMessage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupMessage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthMessage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthMessage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowMessage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupMessage = fmt.Errorf("proto: unexpected end of group")
)
