// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: package.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PackageType int32

const (
	PackageType_PT_UNKNOWN   PackageType = 0
	PackageType_PT_HEARTBEAT PackageType = 1
	PackageType_PT_MESSAGE   PackageType = 2
)

var PackageType_name = map[int32]string{
	0: "PT_UNKNOWN",
	1: "PT_HEARTBEAT",
	2: "PT_MESSAGE",
}

var PackageType_value = map[string]int32{
	"PT_UNKNOWN":   0,
	"PT_HEARTBEAT": 1,
	"PT_MESSAGE":   2,
}

func (x PackageType) String() string {
	return proto.EnumName(PackageType_name, int32(x))
}

func (PackageType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_ae8103ff0e06fb71, []int{0}
}

// 上行数据
type Upstream struct {
	Type                 PackageType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.PackageType" json:"type,omitempty"`
	ReqId                int64       `protobuf:"varint,2,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Data                 []byte      `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Upstream) Reset()         { *m = Upstream{} }
func (m *Upstream) String() string { return proto.CompactTextString(m) }
func (*Upstream) ProtoMessage()    {}
func (*Upstream) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae8103ff0e06fb71, []int{0}
}
func (m *Upstream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Upstream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Upstream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Upstream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Upstream.Merge(m, src)
}
func (m *Upstream) XXX_Size() int {
	return m.Size()
}
func (m *Upstream) XXX_DiscardUnknown() {
	xxx_messageInfo_Upstream.DiscardUnknown(m)
}

var xxx_messageInfo_Upstream proto.InternalMessageInfo

func (m *Upstream) GetType() PackageType {
	if m != nil {
		return m.Type
	}
	return PackageType_PT_UNKNOWN
}

func (m *Upstream) GetReqId() int64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *Upstream) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 下行数据
type Downstream struct {
	Type                 PackageType `protobuf:"varint,1,opt,name=type,proto3,enum=pb.PackageType" json:"type,omitempty"`
	ReqId                int64       `protobuf:"varint,2,opt,name=req_id,json=reqId,proto3" json:"req_id,omitempty"`
	Code                 int32       `protobuf:"varint,3,opt,name=code,proto3" json:"code,omitempty"`
	Err                  string      `protobuf:"bytes,4,opt,name=err,proto3" json:"err,omitempty"`
	Data                 []byte      `protobuf:"bytes,5,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Downstream) Reset()         { *m = Downstream{} }
func (m *Downstream) String() string { return proto.CompactTextString(m) }
func (*Downstream) ProtoMessage()    {}
func (*Downstream) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae8103ff0e06fb71, []int{1}
}
func (m *Downstream) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Downstream) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Downstream.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Downstream) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Downstream.Merge(m, src)
}
func (m *Downstream) XXX_Size() int {
	return m.Size()
}
func (m *Downstream) XXX_DiscardUnknown() {
	xxx_messageInfo_Downstream.DiscardUnknown(m)
}

var xxx_messageInfo_Downstream proto.InternalMessageInfo

func (m *Downstream) GetType() PackageType {
	if m != nil {
		return m.Type
	}
	return PackageType_PT_UNKNOWN
}

func (m *Downstream) GetReqId() int64 {
	if m != nil {
		return m.ReqId
	}
	return 0
}

func (m *Downstream) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Downstream) GetErr() string {
	if m != nil {
		return m.Err
	}
	return ""
}

func (m *Downstream) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// 消息内容，MessageType：1
type Data struct {
	// Types that are valid to be assigned to Data:
	//	*Data_MessageWrapper
	//	*Data_PingWrapper
	Data                 isData_Data `protobuf_oneof:"data"`
	XXX_NoUnkeyedLiteral struct{}    `json:"-"`
	XXX_unrecognized     []byte      `json:"-"`
	XXX_sizecache        int32       `json:"-"`
}

func (m *Data) Reset()         { *m = Data{} }
func (m *Data) String() string { return proto.CompactTextString(m) }
func (*Data) ProtoMessage()    {}
func (*Data) Descriptor() ([]byte, []int) {
	return fileDescriptor_ae8103ff0e06fb71, []int{2}
}
func (m *Data) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Data) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Data.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Data) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Data.Merge(m, src)
}
func (m *Data) XXX_Size() int {
	return m.Size()
}
func (m *Data) XXX_DiscardUnknown() {
	xxx_messageInfo_Data.DiscardUnknown(m)
}

var xxx_messageInfo_Data proto.InternalMessageInfo

type isData_Data interface {
	isData_Data()
	MarshalTo([]byte) (int, error)
	Size() int
}

type Data_MessageWrapper struct {
	MessageWrapper *MessageWrapper `protobuf:"bytes,1,opt,name=message_wrapper,json=messageWrapper,proto3,oneof" json:"message_wrapper,omitempty"`
}
type Data_PingWrapper struct {
	PingWrapper *PingWrapper `protobuf:"bytes,2,opt,name=ping_wrapper,json=pingWrapper,proto3,oneof" json:"ping_wrapper,omitempty"`
}

func (*Data_MessageWrapper) isData_Data() {}
func (*Data_PingWrapper) isData_Data()    {}

func (m *Data) GetData() isData_Data {
	if m != nil {
		return m.Data
	}
	return nil
}

func (m *Data) GetMessageWrapper() *MessageWrapper {
	if x, ok := m.GetData().(*Data_MessageWrapper); ok {
		return x.MessageWrapper
	}
	return nil
}

func (m *Data) GetPingWrapper() *PingWrapper {
	if x, ok := m.GetData().(*Data_PingWrapper); ok {
		return x.PingWrapper
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*Data) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*Data_MessageWrapper)(nil),
		(*Data_PingWrapper)(nil),
	}
}

func init() {
	proto.RegisterEnum("pb.PackageType", PackageType_name, PackageType_value)
	proto.RegisterType((*Upstream)(nil), "pb.Upstream")
	proto.RegisterType((*Downstream)(nil), "pb.Downstream")
	proto.RegisterType((*Data)(nil), "pb.Data")
}

func init() { proto.RegisterFile("package.proto", fileDescriptor_ae8103ff0e06fb71) }

var fileDescriptor_ae8103ff0e06fb71 = []byte{
	// 337 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x91, 0xcf, 0x6a, 0xf2, 0x40,
	0x14, 0xc5, 0x9d, 0x18, 0xe5, 0xfb, 0xae, 0xff, 0xc2, 0x40, 0x4b, 0x70, 0x11, 0x82, 0xdd, 0x84,
	0x2e, 0xb2, 0xb0, 0xdd, 0x95, 0x52, 0x14, 0x43, 0x2d, 0x45, 0x2b, 0x63, 0x44, 0x70, 0x13, 0x26,
	0x66, 0xb0, 0x52, 0x34, 0xe3, 0x38, 0x20, 0x6e, 0xdb, 0x97, 0xe8, 0x23, 0x75, 0xd9, 0x47, 0x28,
	0xf6, 0x45, 0x8a, 0x33, 0x12, 0xed, 0xbe, 0xbb, 0x3b, 0xe7, 0xcc, 0x39, 0xfc, 0xee, 0x0c, 0x54,
	0x38, 0x9d, 0xbe, 0xd0, 0x19, 0xf3, 0xb9, 0x48, 0x65, 0x8a, 0x0d, 0x1e, 0xd7, 0x2b, 0x0b, 0xb6,
	0x5e, 0x67, 0x52, 0xbd, 0xf6, 0xcc, 0xa8, 0x90, 0x31, 0xa3, 0x52, 0x0b, 0x8d, 0x09, 0xfc, 0x1b,
	0xf1, 0xb5, 0x14, 0x8c, 0x2e, 0xf0, 0x05, 0x98, 0x72, 0xcb, 0x99, 0x8d, 0x5c, 0xe4, 0x55, 0x9b,
	0x35, 0x9f, 0xc7, 0xfe, 0x40, 0x17, 0x86, 0x5b, 0xce, 0x88, 0x32, 0xf1, 0x19, 0x14, 0x05, 0x5b,
	0x45, 0xf3, 0xc4, 0x36, 0x5c, 0xe4, 0xe5, 0x49, 0x41, 0xb0, 0xd5, 0x43, 0x82, 0x31, 0x98, 0x09,
	0x95, 0xd4, 0xce, 0xbb, 0xc8, 0x2b, 0x13, 0x35, 0x37, 0x5e, 0x11, 0x40, 0x27, 0xdd, 0x2c, 0xff,
	0xa6, 0x7e, 0x9a, 0x26, 0x4c, 0xd5, 0x17, 0x88, 0x9a, 0xb1, 0x05, 0x79, 0x26, 0x84, 0x6d, 0xba,
	0xc8, 0xfb, 0x4f, 0xf6, 0x63, 0x06, 0x51, 0x38, 0x81, 0x78, 0x43, 0x60, 0x76, 0xa8, 0xa4, 0xf8,
	0x16, 0x6a, 0x87, 0xb7, 0x88, 0x36, 0x82, 0x72, 0xce, 0x84, 0x22, 0x29, 0x35, 0xf1, 0x9e, 0xa4,
	0xa7, 0xad, 0xb1, 0x76, 0xba, 0x39, 0x52, 0x5d, 0xfc, 0x52, 0xf0, 0x35, 0x94, 0xf9, 0x7c, 0x39,
	0xcb, 0xb2, 0x86, 0xca, 0xea, 0x2d, 0xe6, 0xcb, 0xd9, 0x31, 0x58, 0xe2, 0xc7, 0x63, 0xbb, 0xa8,
	0x89, 0x2e, 0xef, 0xa0, 0x74, 0xb2, 0x2b, 0xae, 0x02, 0x0c, 0xc2, 0x68, 0xd4, 0x7f, 0xec, 0x3f,
	0x8d, 0xfb, 0x56, 0x0e, 0x5b, 0x50, 0x1e, 0x84, 0x51, 0x37, 0x68, 0x91, 0xb0, 0x1d, 0xb4, 0x42,
	0x0b, 0x1d, 0x6e, 0xf4, 0x82, 0xe1, 0xb0, 0x75, 0x1f, 0x58, 0x46, 0xfb, 0xfc, 0x63, 0xe7, 0xa0,
	0xcf, 0x9d, 0x83, 0xbe, 0x76, 0x0e, 0x7a, 0xff, 0x76, 0x72, 0x13, 0xd3, 0xbf, 0xe1, 0x71, 0x5c,
	0x54, 0xdf, 0x78, 0xf5, 0x13, 0x00, 0x00, 0xff, 0xff, 0xed, 0x28, 0xcf, 0x8c, 0xfb, 0x01, 0x00,
	0x00,
}

func (m *Upstream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Upstream) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Upstream) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintPackage(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x1a
	}
	if m.ReqId != 0 {
		i = encodeVarintPackage(dAtA, i, uint64(m.ReqId))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintPackage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Downstream) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Downstream) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Downstream) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Data) > 0 {
		i -= len(m.Data)
		copy(dAtA[i:], m.Data)
		i = encodeVarintPackage(dAtA, i, uint64(len(m.Data)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Err) > 0 {
		i -= len(m.Err)
		copy(dAtA[i:], m.Err)
		i = encodeVarintPackage(dAtA, i, uint64(len(m.Err)))
		i--
		dAtA[i] = 0x22
	}
	if m.Code != 0 {
		i = encodeVarintPackage(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x18
	}
	if m.ReqId != 0 {
		i = encodeVarintPackage(dAtA, i, uint64(m.ReqId))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = encodeVarintPackage(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Data) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Data) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Data != nil {
		{
			size := m.Data.Size()
			i -= size
			if _, err := m.Data.MarshalTo(dAtA[i:]); err != nil {
				return 0, err
			}
		}
	}
	return len(dAtA) - i, nil
}

func (m *Data_MessageWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data_MessageWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.MessageWrapper != nil {
		{
			size, err := m.MessageWrapper.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPackage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}
func (m *Data_PingWrapper) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Data_PingWrapper) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	if m.PingWrapper != nil {
		{
			size, err := m.PingWrapper.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintPackage(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}
func encodeVarintPackage(dAtA []byte, offset int, v uint64) int {
	offset -= sovPackage(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Upstream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPackage(uint64(m.Type))
	}
	if m.ReqId != 0 {
		n += 1 + sovPackage(uint64(m.ReqId))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPackage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Downstream) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + sovPackage(uint64(m.Type))
	}
	if m.ReqId != 0 {
		n += 1 + sovPackage(uint64(m.ReqId))
	}
	if m.Code != 0 {
		n += 1 + sovPackage(uint64(m.Code))
	}
	l = len(m.Err)
	if l > 0 {
		n += 1 + l + sovPackage(uint64(l))
	}
	l = len(m.Data)
	if l > 0 {
		n += 1 + l + sovPackage(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Data) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Data != nil {
		n += m.Data.Size()
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Data_MessageWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.MessageWrapper != nil {
		l = m.MessageWrapper.Size()
		n += 1 + l + sovPackage(uint64(l))
	}
	return n
}
func (m *Data_PingWrapper) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PingWrapper != nil {
		l = m.PingWrapper.Size()
		n += 1 + l + sovPackage(uint64(l))
	}
	return n
}

func sovPackage(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozPackage(x uint64) (n int) {
	return sovPackage(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Upstream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPackage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Upstream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Upstream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PackageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqId", wireType)
			}
			m.ReqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPackage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPackage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPackage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPackage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Downstream) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPackage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Downstream: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Downstream: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= PackageType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReqId", wireType)
			}
			m.ReqId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ReqId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Err", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthPackage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Err = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Data", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthPackage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Data = append(m.Data[:0], dAtA[iNdEx:postIndex]...)
			if m.Data == nil {
				m.Data = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPackage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPackage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPackage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Data) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowPackage
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Data: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Data: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MessageWrapper", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPackage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &MessageWrapper{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Data_MessageWrapper{v}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PingWrapper", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthPackage
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthPackage
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			v := &PingWrapper{}
			if err := v.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			m.Data = &Data_PingWrapper{v}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipPackage(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthPackage
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthPackage
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipPackage(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowPackage
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowPackage
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthPackage
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupPackage
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthPackage
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthPackage        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowPackage          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupPackage = fmt.Errorf("proto: unexpected end of group")
)
